from typing import Any

from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command, or_f

from motor.core import AgnosticDatabase as MDB

from keyboards import reply_builder, main_kb

router = Router()


@router.message(or_f(Command("search"), F.text == "‚òï –ò—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"))
async def search_interlocutor(message: Message, db: MDB, user: dict[str, Any]) -> None:
    pattern = {
        "text": (
            "<b>‚òï –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç</b>\n"
            "<i>–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /leave, —á—Ç–æ–±—ã –ø–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç</i>"
        ),
        "reply_markup": reply_builder("üö´ –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥")
    }

    if user["status"] == 0:
        interlocutor = await db.users.find_one({"status": 1})
        await db.users.update_one({"_id": user["_id"]}, {"$set": {"status": 1}})

        if not interlocutor:
            pattern["text"] = (
                "<b>üëÄ –ò—â—É —Ç–µ–±–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...</b>\n"
                "<i>/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞</i>"
            )
            pattern["reply_markup"] = reply_builder("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫")
        else:
            pattern["text"] = (
                "<b>üéÅ –Ø –Ω–∞—à–µ–ª —Ç–µ–±–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!</b>\n"
                "<i>/next - –°–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫</i>\n"
                "<i>/leave - –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥</i>"
            )
            pattern["reply_markup"] = reply_builder("üö´ –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥")
            
            await db.users.update_one(
                {"_id": user["_id"]}, {"$set": {"status": 2, "interlocutor": interlocutor["_id"]}}
            )
            await db.users.update_one(
                {"_id": interlocutor["_id"]}, {"$set": {"status": 2, "interlocutor": user["_id"]}}
            )
            await message.bot.send_message(interlocutor["_id"], **pattern)
    elif user["status"] == 1:
        pattern["text"] = (
            "<b>üëÄ –£–ñ–ï –ò–©–£ —Ç–µ–±–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...</b>\n"
            "<i>/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞</i>"
        )
        pattern["reply_markup"] = reply_builder("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫")

    await message.reply(**pattern)


@router.message(or_f(Command("cancel"), F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫"))
async def cancel_search(message: Message, db: MDB, user: dict[str, Any]) -> None:
    if user["status"] == 1:
        await db.users.update_one({"_id": user["_id"]}, {"$set": {"status": 0}})
        await message.reply(
            "<b>üòî –í—Å–µ.. –±–æ–ª—å—à–µ –Ω–∏–∫–æ–≥–æ –∏—Å–∫–∞—Ç—å –Ω–µ –±—É–¥—É!</b>", reply_markup=main_kb
        )


@router.message(or_f(Command(commands=["leave", "stop"]), F.text == "üö´ –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥"))
async def leave(message: Message, db: MDB, user: dict[str, Any]) -> None:
    if user["status"] == 2:
        await message.reply("<b>üí¨ –¢—ã –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç!</b>", reply_markup=main_kb)
        await message.bot.send_message(
            user["interlocutor"], "<b>üí¨ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç!</b>", reply_markup=main_kb
        )

        await db.users.update_many(
            {"_id": {"$in": [user["_id"], user["interlocutor"]]}},
            {"$set": {"status": 0, "interlocutor": ""}}
        )

        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–ø–æ–∏—Å–∫


@router.message(Command("next"))
async def next_interlocutor(message: Message, db: MDB, user: dict[str, Any]) -> None:
    if user["status"] == 2:
        await message.bot.send_message(
            user["interlocutor"], "<b>üí¨ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç!</b>", reply_markup=main_kb
        )
        await db.users.update_many(
            {"_id": {"$in": [user["_id"], user["interlocutor"]]}},
            {"$set": {"status": 0, "interlocutor": ""}}
        )

    await search_interlocutor(message, db)